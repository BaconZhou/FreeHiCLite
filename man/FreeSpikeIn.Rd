% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spikeIn.R
\name{FreeSpikeIn}
\alias{FreeSpikeIn}
\title{FreeHiC spikein}
\usage{
FreeSpikeIn(
  contactBackground,
  contactSpikeInSignal,
  kernelSmooth = TRUE,
  bandwith = 500000L
)
}
\arguments{
\item{contactBackground}{The contact matrix. It can be 
\itemize{
\item{\code{\link[base]{matrix}}}{A matrix with columns (x, y, counts).}
\item{\code{\link[base]{data.frame}}}{A data.frame with columns (chr1, x, y, chr2, counts).}
\item{\code{\link[base]{list}}}{A list of matrix, where the matrix has columns (x, y, counts).}
}
where \code{x} stands for the first chromosome location, \code{y} stands for the second chromosome location and \code{counts} is the interaction counts.}

\item{contactSpikeInSignal}{The spikein signal. It should has the exact same format as \code{contactBackground}}

\item{kernelSmooth}{TRUE or FALSE. Whether to perform kernel smoothing.}

\item{bandwith}{The bandwith used in the kernel smooth.}
}
\value{
A same format as contactBackgroup
}
\description{
Add spikein to contact matrix.
}
\details{

}
\examples{

library(FreeHiCLite)

N <- 2000
Ns <- 200
maxBinX <- maxBinY <- 2000000L
maxCounts <- 10
binX <- sample(1:maxBinX, N, replace=TRUE)
binY <- sample(1:maxBinY, N, replace=TRUE)
counts <- sample(1:10, N, replace=TRUE)

kernelSmooth = TRUE
bandwith = 50000L


## Matrix version
## matrix layout as x, y, counts

contacts <- matrix(0, N, 3)
contacts[,1] <- binX
contacts[,2] <- binY
contacts[,3] <- counts

spikeIn <- contacts[sample(1:N, Ns),]
hist(spikeIn[,3])

spikeIn[,3] <- spikeIn[,3] * sample(seq(0, 10, 0.5), Ns, replace=TRUE)
hist(spikeIn[,3])

res <- FreeSpikeIn(contacts, spikeIn, kernelSmooth = kernelSmooth, bandwith = bandwith)
head(res)

## List version
N2 = 3000
Ns2 = 300
binX2 <- sample(1:maxBinX, N2, replace=TRUE)
binY2 <- sample(1:maxBinY, N2, replace=TRUE)
counts2 <- sample(1:10, N2, replace=TRUE)

contacts2 <- matrix(0, N2, 3)
contacts2[,1] <- binX2
contacts2[,2] <- binY2
contacts2[,3] <- counts2

spikeIn2 <- contacts2[sample(1:N2, Ns2),]
spikeIn2[,3] <- spikeIn2[,3] * sample(seq(0, 10, 0.5), Ns2, replace=TRUE)

contactsBackgroup <- list("1_1" = contacts, "2_2" = contacts2)
spikeInlist <- list("1_1" = spikeIn, "2_2" = spikeIn2)

res <- FreeSpikeIn(contactsBackgroup, spikeInlist, kernelSmooth = kernelSmooth, bandwith = bandwith)
str(res)

## Dataframe version

chr1 <- c(rep("1", N), rep("2", N2))
chr2 <- c(rep("1", N), rep("2", N2))

schr1 <- c(rep("1", Ns), rep("2", Ns2))
schr2 <- c(rep("1", Ns), rep("2", Ns2))

contactsAll <- rbind(contacts, contacts2)
spikeInAll <- rbind(spikeIn, spikeIn2)

contactsDf <- data.frame(chr1 = chr1, x = contactsAll[,1], chr2 = chr2, y = contactsAll[,2], counts = contactsAll[,3])
spikeInDf <- data.frame(chr1 = schr1, x = spikeInAll[,1], chr2 = schr2, y = spikeInAll[,2], counts = spikeInAll[,3])
res <- FreeSpikeIn(contactsDf, spikeInDf, kernelSmooth = kernelSmooth, bandwith = bandwith)
head(res)




}
